{"version":3,"sources":["ThemeContext.tsx","QuestionBlock.tsx","QuestionBlocks.tsx","WolfCounter.ts","Tally.tsx","WolfResult.tsx","Donate.tsx","Header.tsx","Random.ts","Questions.ts","WolfApp.tsx","index.tsx"],"names":["themes","background","textColor","hyperlinkColor","ThemeContext","React","createContext","Answer","props","theme","useContext","useState","backgroundColor","setBackgroundColor","answerSelected","state","answerSelectedForBlock","answerId","useEffect","setUserAnswers","prevUserAnswers","add","Set","delete","onClick","dispatch","type","style","color","display","answer","init","reducer","action","Error","QuestionBlock","useReducer","question","answers","className","map","ans","key","id","userAnswers","QuestionBlocks","Array","from","questionsAnswers","questionBlocks","setQuestionBlocks","qb","getWolvesInAnswers","answersWolves","wolvesInAnwsers","Map","forEach","userAnswerId","wolfForAnswer","get","wolfIdForAnswer","has","set","prevCount","wia","wolfId","times","WolfRecord","wolfs","i","push","role","aria-label","wolf","face","Tally","wolvesInAnwsersList","setWolvesInAnwsersList","wt","allWolves","filter","w","WolfResult","name","Donate","href","Header","themButtonClick","event","currentTarget","setTheme","resetButtonClick","getRandomIds","list","max","ids","size","generatedIndex","Math","round","random","length","questions","wolves","questionAnswers","getSessionQuestionsAnswers","sessionQuestionIds","q","sessionQuestions","sessionQuestionsAnswers","sq","allQuestionAnswers","sessionQuestionAnswers","sqa","a","useWolfApp","useMemo","randomWolfId","values","next","value","getWolfId","getAnswersWolves","setSessionQuestionsAnswers","wolfResult","setWolfResult","showWolfResult","setShowWolfResult","showTally","setShowTally","WolfApp","maxWolf","reduce","previous","current","getMaxWolfResult","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3b7c931.chunk.js","sourcesContent":["import React from \"react\";\n\nexport interface ThemeInfo {\n  background: string;\n  textColor: string;\n  hyperlinkColor: string;\n}\n\ntype Theme = \"day\" | \"night\";\n\nexport const themes: Record<Theme, ThemeInfo> = {\n  day: {\n    background: \"#eeeeee\",\n    textColor: \"black\",\n    hyperlinkColor: \"grey\",\n  },\n  night: {\n    background: \"#222222\",\n    textColor: \"white\",\n    hyperlinkColor: \"#09d3ac\",\n  },\n};\n\nexport let ThemeContext: React.Context<ThemeInfo> = React.createContext(\n  themes.day\n);\n","import React, {\n  useContext,\n  useState,\n  useEffect,\n  useReducer,\n  Dispatch,\n} from \"react\";\nimport \"./QuestionBlock.css\";\nimport { ThemeContext } from \"./ThemeContext\";\nimport { IQuestion, IAnswer, AnswerId } from \"./Questions\";\n\ntype AnswerProps = {\n  answerId: AnswerId;\n  answer: string;\n  state: QuestionBlockState;\n  dispatch: React.Dispatch<QuestionBlockAction>;\n  userAnswers: Set<AnswerId>;\n  setUserAnswers: Dispatch<React.SetStateAction<Set<AnswerId>>>;\n};\n\nexport type QuestionBlockProps = {\n  question: IQuestion;\n  answers: IAnswer[];\n  userAnswers: Set<AnswerId>;\n  setUserAnswers: Dispatch<React.SetStateAction<Set<AnswerId>>>;\n};\n\nfunction Answer(props: AnswerProps) {\n  const theme = useContext(ThemeContext);\n  const [backgroundColor, setBackgroundColor] = useState(\"white\");\n\n  const buttonClick = () => {\n    props.dispatch({ type: \"questionSelected\", answerId: props.answerId });\n  };\n\n  const answerSelected = props.state.answerSelectedForBlock === props.answerId;\n\n  const handleBackgroundColor = () => {\n    if (answerSelected) {\n      setBackgroundColor(\"grey\");\n    } else {\n      setBackgroundColor(\"white\");\n    }\n  };\n\n  const handleUserAnswers = () => {\n    if (answerSelected) {\n      props.setUserAnswers((prevUserAnswers) => {\n        prevUserAnswers.add(props.answerId);\n        return new Set<AnswerId>(prevUserAnswers);\n      });\n    } else {\n      props.setUserAnswers((prevUserAnswers) => {\n        prevUserAnswers.delete(props.answerId);\n        return new Set<AnswerId>(prevUserAnswers);\n      });\n    }\n  };\n\n  useEffect(handleBackgroundColor, [\n    props.answerId,\n    props.state.answerSelectedForBlock,\n  ]);\n\n  useEffect(handleUserAnswers, [\n    props.answerId,\n    props.state.answerSelectedForBlock,\n  ]);\n\n  return (\n    <button\n      onClick={buttonClick}\n      style={{\n        color: theme.textColor,\n        backgroundColor: backgroundColor,\n        display: \"block\",\n      }}\n    >\n      {props.answer}\n    </button>\n  );\n}\n\ntype QuestionBlockState = {\n  answerSelectedForBlock: number;\n};\n\ntype QuestionBlockAction = {\n  type: string;\n  answerId: AnswerId;\n};\n\nfunction init(answerSelected: number) {\n  return { answerSelectedForBlock: answerSelected };\n}\n\nfunction reducer(state: QuestionBlockState, action: QuestionBlockAction) {\n  switch (action.type) {\n    case \"questionSelected\":\n      return { answerSelectedForBlock: action.answerId };\n    case \"reset\":\n      return init(action.answerId);\n    default:\n      throw new Error();\n  }\n}\n\nfunction QuestionBlock(props: QuestionBlockProps) {\n  let noAnswerSelected: number = 0;\n  const [state, dispatch] = useReducer(reducer, noAnswerSelected, init);\n\n  useEffect(() => {\n    dispatch({ type: \"reset\", answerId: noAnswerSelected });\n  }, [props.question, props.answers, noAnswerSelected]);\n\n  return (\n    <>\n      <h4 className=\"question-block\"> {props.question.question}</h4>\n      {props.answers.map((ans) => (\n        <Answer\n          key={ans.id}\n          answer={ans.answer}\n          answerId={ans.id}\n          state={state}\n          dispatch={dispatch}\n          userAnswers={props.userAnswers}\n          setUserAnswers={props.setUserAnswers}\n        ></Answer>\n      ))}\n    </>\n  );\n}\n\nexport default QuestionBlock;\n","import React, { Dispatch, useEffect, useState } from \"react\";\nimport QuestionBlock from \"./QuestionBlock\";\nimport { IQuestion, IAnswer, AnswerId } from \"./Questions\";\n\nexport type QuestionBlocksProps = {\n  questionsAnswers: Map<IQuestion, IAnswer[]>;\n  setUserAnswers: Dispatch<React.SetStateAction<Set<AnswerId>>>;\n  userAnswers: Set<AnswerId>;\n};\n\nfunction QuestionBlocks(props: QuestionBlocksProps) {\n  const [questionBlocks, setQuestionBlocks] = useState(\n    Array.from(props.questionsAnswers)\n  );\n\n  useEffect(() => {\n    setQuestionBlocks(Array.from(props.questionsAnswers));\n  }, [props.questionsAnswers]);\n\n  return (\n    <>\n      {questionBlocks.map((qb) => {\n        return (\n          <div key={qb[0].id}>\n            <QuestionBlock\n              question={qb[0]}\n              answers={qb[1]}\n              userAnswers={props.userAnswers}\n              setUserAnswers={props.setUserAnswers}\n            ></QuestionBlock>\n          </div>\n        );\n      })}\n    </>\n  );\n}\n\nexport default QuestionBlocks;\n","import { WolfId, AnswerId, IWolf } from \"./Questions\";\n\nexport type WolfTimes = {\n  wolfId: WolfId;\n  times: number;\n};\n\nconst getWolvesInAnswers = (\n  userAnswers: Set<AnswerId>,\n  answersWolves: Map<AnswerId, IWolf>\n): WolfTimes[] => {\n  let wolvesInAnwsers: Map<WolfId, number> = new Map<WolfId, number>();\n\n  userAnswers.forEach((userAnswerId) => {\n    const wolfForAnswer = answersWolves.get(userAnswerId);\n    const wolfIdForAnswer = wolfForAnswer?.id as WolfId;\n\n    if (!wolvesInAnwsers.has(wolfIdForAnswer)) {\n      wolvesInAnwsers.set(wolfIdForAnswer, 0);\n    }\n\n    let prevCount = wolvesInAnwsers.get(wolfIdForAnswer) as number;\n\n    wolvesInAnwsers.set(wolfIdForAnswer, prevCount + 1);\n  });\n\n  let wolvesInAnwsersList: WolfTimes[] = Array.from(wolvesInAnwsers).map(\n    (wia) => {\n      return {\n        wolfId: wia[0],\n        times: wia[1],\n      };\n    }\n  );\n\n  return wolvesInAnwsersList;\n};\n\nexport const getMaxWolfResult = (\n  userAnswers: Set<AnswerId>,\n  answersWolves: Map<AnswerId, IWolf>,\n  allWolves: IWolf[]\n): IWolf => {\n  let wolvesInAnwsers = getWolvesInAnswers(userAnswers, answersWolves);\n\n  var maxWolf = wolvesInAnwsers.reduce(function (\n    previous: WolfTimes,\n    current: WolfTimes\n  ) {\n    return current.times >= previous.times ? current : previous;\n  });\n\n  return allWolves.filter((w) => w.id === maxWolf.wolfId)[0];\n};\n\nexport default getWolvesInAnswers;\n","import React, { useState, useEffect } from \"react\";\nimport { IWolf } from \"./Questions\";\nimport getWolvesInAnswers, { WolfTimes } from \"./WolfCounter\";\nimport \"./Tally.css\";\n\ntype WolfRecordProps = {\n  times: number;\n  wolf: IWolf;\n};\n\ntype TallyProps = {\n  userAnswers: Set<number>;\n  answersWolves: Map<number, IWolf>;\n  allWolves: IWolf[];\n};\n\nfunction WolfRecord(props: WolfRecordProps) {\n  let wolfs = [];\n  for (let i = 0; i < props.times; ++i) {\n    wolfs.push(\n      <span key={i} role=\"img\" aria-label=\"wolf-times\">\n        {props.wolf.face}\n      </span>\n    );\n  }\n\n  return <div>{wolfs}</div>;\n}\n\nfunction Tally(props: TallyProps) {\n  const [wolvesInAnwsersList, setWolvesInAnwsersList] = useState<WolfTimes[]>(\n    []\n  );\n\n  useEffect(() => {\n    let wolvesInAnwsers = getWolvesInAnswers(\n      props.userAnswers,\n      props.answersWolves\n    );\n\n    setWolvesInAnwsersList(wolvesInAnwsers);\n  }, [props.answersWolves, props.userAnswers]);\n\n  return (\n    <div>\n      <h4 className=\"tally\">Tally</h4>\n      {wolvesInAnwsersList.map((wt: WolfTimes) => {\n        let wolfForAnswer = props.allWolves.filter(\n          (w) => w.id === wt.wolfId\n        )[0];\n        return (\n          <WolfRecord\n            key={wolfForAnswer.id}\n            wolf={wolfForAnswer}\n            times={wt.times}\n          ></WolfRecord>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Tally;\n","import React, { useContext } from \"react\";\nimport \"./WolfResult.css\";\nimport { ThemeContext } from \"./ThemeContext\";\nimport { IWolf } from \"./Questions\";\n\ntype WolfResultProps = {\n  wolf: IWolf;\n};\n\nfunction WolfResult(props: WolfResultProps) {\n  const theme = useContext(ThemeContext);\n  return (\n    <div>\n      <h4 className=\"wolf-result\">Wolf Result</h4>\n      <span role=\"img\" aria-label=\"wolf-times\">\n        {props.wolf.face}\n      </span>\n      <p style={{ color: theme.textColor }}>{props.wolf.name}</p>\n    </div>\n  );\n}\n\nexport default WolfResult;\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"./ThemeContext\";\nimport \"./Donate.css\";\n\nfunction Donate() {\n  const theme = useContext(ThemeContext);\n  return (\n    <div>\n      <h4 className=\"donate\">Donate</h4>\n      <a\n        href=\"https://wolf.org/support/donate-options/\"\n        style={{ color: theme.hyperlinkColor }}\n      >\n        Donate to save the wolves\n      </a>\n    </div>\n  );\n}\n\nexport default Donate;\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { themes, ThemeInfo } from \"./ThemeContext\";\nimport \"./Header.css\";\n\ntype HeaderProps = {\n  setTheme: Dispatch<SetStateAction<ThemeInfo>>;\n  resetButtonClick: () => void;\n};\n\nfunction Header(props: HeaderProps) {\n  let themButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>\n  ) => {\n    if (event.currentTarget.name === \"Day\") {\n      props.setTheme(themes.day);\n    } else if (event.currentTarget.name === \"Night\") {\n      props.setTheme(themes.night);\n    }\n  };\n\n  return (\n    <div>\n      <h4 className=\"header\">Header</h4>\n      <button name=\"Day\" onClick={themButtonClick}>\n        <span role=\"img\" aria-label=\"Day\">\n          ☀️\n        </span>\n      </button>\n      <button name=\"Night\" onClick={themButtonClick}>\n        <span role=\"img\" aria-label=\"Day\">\n          🌘\n        </span>\n      </button>\n      <button onClick={props.resetButtonClick}>Reset</button>\n    </div>\n  );\n}\n\nexport default Header;\n","export let getRandomIds = (list: number[], max: number) => {\n  let ids = new Set<number>();\n  while (ids.size < max) {\n    const generatedIndex = Math.round(Math.random() * list.length - 1);\n    if (list[generatedIndex]) {\n      ids.add(list[generatedIndex]);\n    }\n  }\n  return ids;\n};\n","import { getRandomIds } from \"./Random\";\n\ntype QuestionId = number;\nexport type AnswerId = number;\nexport type WolfId = number;\n\nexport interface IQuestion {\n  id: QuestionId;\n  question: string;\n}\n\nexport interface IAnswer {\n  id: AnswerId;\n  answer: string;\n}\n\nexport interface IWolf {\n  id: WolfId;\n  name: string;\n  face: string;\n}\n\nlet questions: IQuestion[] = [\n  { id: 1, question: \"aaa?\" },\n  { id: 2, question: \"bbb?\" },\n  { id: 3, question: \"ccc?\" },\n  { id: 4, question: \"ddd?\" },\n];\n\nlet answers: IAnswer[] = [\n  { id: 1, answer: \"aaa\" },\n  { id: 2, answer: \"bbb\" },\n  { id: 3, answer: \"ccc\" },\n  { id: 4, answer: \"ddd\" },\n  { id: 5, answer: \"aaa2\" },\n  { id: 6, answer: \"bbb2\" },\n  { id: 7, answer: \"ccc2\" },\n  { id: 8, answer: \"ddd2\" },\n  { id: 9, answer: \"aaa3\" },\n  { id: 10, answer: \"bbb3\" },\n  { id: 11, answer: \"ccc3\" },\n  { id: 12, answer: \"ddd3\" },\n  { id: 13, answer: \"aaa4\" },\n  { id: 14, answer: \"bbb4\" },\n  { id: 15, answer: \"ccc4\" },\n  { id: 16, answer: \"ddd4\" },\n  { id: 17, answer: \"aaa5\" },\n  { id: 18, answer: \"bbb5\" },\n  { id: 19, answer: \"ccc5\" },\n  { id: 20, answer: \"ddd5\" },\n  { id: 21, answer: \"aaa6\" },\n  { id: 22, answer: \"bbb6\" },\n  { id: 23, answer: \"ccc6\" },\n  { id: 24, answer: \"ddd6\" },\n  { id: 25, answer: \"aaa7\" },\n  { id: 26, answer: \"bbb7\" },\n  { id: 27, answer: \"ccc7\" },\n  { id: 28, answer: \"ddd7\" },\n  { id: 29, answer: \"aaa8\" },\n  { id: 30, answer: \"bbb8\" },\n  { id: 31, answer: \"ccc8\" },\n  { id: 32, answer: \"ddd8\" },\n];\n\nlet wolves: IWolf[] = [\n  { id: 1, name: \"Mexican wolf\", face: \"🐺\" },\n  { id: 2, name: \"Artic Wolf\", face: \"🦊\" },\n  { id: 3, name: \"Japanese wolf\", face: \"🐱\" },\n  { id: 4, name: \"Iberian Wolf\", face: \"🐻\" },\n];\n\nexport let questionAnswers = new Map<QuestionId, IAnswer[]>();\nquestionAnswers.set(1, [\n  answers[0],\n  answers[1],\n  answers[2],\n  answers[3],\n  answers[4],\n  answers[5],\n  answers[6],\n  answers[7],\n]);\nquestionAnswers.set(2, [\n  answers[8],\n  answers[9],\n  answers[10],\n  answers[11],\n  answers[12],\n  answers[13],\n  answers[14],\n  answers[15],\n]);\nquestionAnswers.set(3, [\n  answers[16],\n  answers[17],\n  answers[18],\n  answers[19],\n  answers[20],\n  answers[21],\n  answers[22],\n  answers[23],\n]);\nquestionAnswers.set(4, [\n  answers[24],\n  answers[25],\n  answers[26],\n  answers[27],\n  answers[28],\n  answers[29],\n  answers[30],\n  answers[31],\n]);\n\nexport let GetAllWolves = () => {\n  return wolves;\n};\n\nexport const getAnswersWolves = () => {\n  let answersWolves = new Map<AnswerId, IWolf>();\n\n  answers.forEach((answer) => {\n    const answerId = answer.id;\n    const randomWolfId = getRandomIds(\n      wolves.map((w) => w.id),\n      1\n    );\n\n    const getWolfId = (randomWolfId: Set<WolfId>): WolfId => {\n      const wolfId = randomWolfId.values().next().value;\n      return wolfId;\n    };\n\n    const wolf = wolves.filter((w) => w.id === getWolfId(randomWolfId))[0];\n    answersWolves.set(answerId, wolf);\n  });\n  return answersWolves;\n};\n\nexport const getSessionQuestionsAnswers = () => {\n  let sessionQuestionIds = getRandomIds(\n    questions.map((q) => q.id),\n    4\n  );\n  let sessionQuestions = questions.filter((q) => sessionQuestionIds.has(q.id));\n  let sessionQuestionsAnswers = new Map<IQuestion, IAnswer[]>();\n  sessionQuestions.forEach((sq) => {\n    let allQuestionAnswers = questionAnswers.get(sq.id);\n\n    if (allQuestionAnswers) {\n      const sessionQuestionAnswers = getRandomIds(\n        allQuestionAnswers.map((sqa) => sqa.id),\n        4\n      );\n      sessionQuestionsAnswers.set(\n        sq,\n        answers.filter((a) => sessionQuestionAnswers.has(a.id))\n      );\n    }\n  });\n\n  return sessionQuestionsAnswers;\n};\n","import React, { useState, useMemo, useEffect } from \"react\";\nimport \"./WolfApp.css\";\nimport QuestionBlocks from \"./QuestionBlocks\";\nimport Tally from \"./Tally\";\nimport WolfResult from \"./WolfResult\";\nimport Donate from \"./Donate\";\nimport Header from \"./Header\";\nimport { ThemeContext, themes } from \"./ThemeContext\";\nimport {\n  getSessionQuestionsAnswers,\n  getAnswersWolves,\n  GetAllWolves,\n  AnswerId,\n} from \"./Questions\";\nimport { getMaxWolfResult } from \"./WolfCounter\";\n\nfunction useWolfApp() {\n  const answersWolves = useMemo(() => getAnswersWolves(), []);\n  const allWolves = useMemo(() => GetAllWolves(), []);\n  const [sessionQuestionsAnswers, setSessionQuestionsAnswers] = useState(\n    getSessionQuestionsAnswers()\n  );\n  const [userAnswers, setUserAnswers] = useState(new Set<AnswerId>());\n  const [wolfResult, setWolfResult] = useState(allWolves[0]);\n  const [showWolfResult, setShowWolfResult] = useState(false);\n  const [showTally, setShowTally] = useState(false);\n\n  return {\n    sessionQuestionsAnswers,\n    setSessionQuestionsAnswers,\n    answersWolves,\n    allWolves,\n    userAnswers,\n    setUserAnswers,\n    wolfResult,\n    setWolfResult,\n    showWolfResult,\n    setShowWolfResult,\n    showTally,\n    setShowTally,\n  };\n}\n\nfunction WolfApp() {\n  const {\n    sessionQuestionsAnswers,\n    setSessionQuestionsAnswers,\n    answersWolves,\n    allWolves,\n    userAnswers,\n    setUserAnswers,\n    wolfResult,\n    setWolfResult,\n    showWolfResult,\n    setShowWolfResult,\n    showTally,\n    setShowTally,\n  } = useWolfApp();\n\n  const [theme, setTheme] = useState(themes.day);\n\n  useEffect(() => {\n    let quizFinished = sessionQuestionsAnswers.size === userAnswers.size;\n    if (quizFinished) {\n      setWolfResult(getMaxWolfResult(userAnswers, answersWolves, allWolves));\n      setShowWolfResult(true);\n    }\n  }, [\n    allWolves,\n    answersWolves,\n    sessionQuestionsAnswers.size,\n    setShowWolfResult,\n    setWolfResult,\n    userAnswers,\n    userAnswers.size,\n  ]);\n\n  useEffect(() => {\n    if (userAnswers.size > 0) {\n      setShowTally(true);\n    }\n  }, [setShowTally, userAnswers]);\n\n  const resetButtonClick = () => {\n    setSessionQuestionsAnswers(getSessionQuestionsAnswers());\n    setUserAnswers(new Set<AnswerId>());\n    setShowWolfResult(false);\n    setWolfResult(allWolves[0]);\n    setShowTally(false);\n  };\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      <div className=\"grid\" style={{ background: theme.background }}>\n        <Header\n          setTheme={setTheme}\n          resetButtonClick={resetButtonClick}\n        ></Header>\n        <QuestionBlocks\n          questionsAnswers={sessionQuestionsAnswers}\n          userAnswers={userAnswers}\n          setUserAnswers={setUserAnswers}\n        ></QuestionBlocks>\n        {showTally && (\n          <Tally\n            userAnswers={userAnswers}\n            answersWolves={answersWolves}\n            allWolves={allWolves}\n          ></Tally>\n        )}\n        {showWolfResult && <WolfResult wolf={wolfResult}></WolfResult>}\n        <Donate></Donate>\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default WolfApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport WolfApp from \"./WolfApp\";\n\nconst render = () => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <WolfApp></WolfApp>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n};\n\nrender();\n"],"sourceRoot":""}